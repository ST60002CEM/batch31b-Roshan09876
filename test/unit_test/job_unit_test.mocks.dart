// Mocks generated by Mockito 5.4.4 from annotations
// in job_finder/test/unit_test/job_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:job_finder/core/common/Failure.dart' as _i6;
import 'package:job_finder/features/pagination/data/model/job_api_model.dart'
    as _i7;
import 'package:job_finder/features/pagination/domain/repository/job_repository.dart'
    as _i2;
import 'package:job_finder/features/pagination/domain/usecase/get_applied_job_usecase.dart'
    as _i9;
import 'package:job_finder/features/pagination/domain/usecase/get_job_usecase.dart'
    as _i4;
import 'package:job_finder/features/pagination/domain/usecase/job_usecase.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJobRepository_0 extends _i1.SmartFake implements _i2.JobRepository {
  _FakeJobRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetJobuseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetJobuseCase extends _i1.Mock implements _i4.GetJobuseCase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.JobApiModel>>> getJobs(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobs,
          [page],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.JobApiModel>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.JobApiModel>>(
          this,
          Invocation.method(
            #getJobs,
            [page],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.JobApiModel>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.JobApiModel>>(
          this,
          Invocation.method(
            #getJobs,
            [page],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.JobApiModel>>>);
}

/// A class which mocks [JobUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobUseCase extends _i1.Mock implements _i8.JobUseCase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.JobApiModel>>> getAppliedJobs(
          {required String? userId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppliedJobs,
          [],
          {#userId: userId},
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.JobApiModel>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.JobApiModel>>(
          this,
          Invocation.method(
            #getAppliedJobs,
            [],
            {#userId: userId},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.JobApiModel>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.JobApiModel>>(
          this,
          Invocation.method(
            #getAppliedJobs,
            [],
            {#userId: userId},
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.JobApiModel>>>);
}

/// A class which mocks [GetAppliedJobUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAppliedJobUseCase extends _i1.Mock
    implements _i9.GetAppliedJobUseCase {
  @override
  _i2.JobRepository get jobRepository => (super.noSuchMethod(
        Invocation.getter(#jobRepository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
        returnValueForMissingStub: _FakeJobRepository_0(
          this,
          Invocation.getter(#jobRepository),
        ),
      ) as _i2.JobRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> applyJobs(
          _i7.JobApiModel? jobApiModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyJobs,
          [jobApiModel],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #applyJobs,
            [jobApiModel],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
                _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #applyJobs,
            [jobApiModel],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
